# -*- coding: utf-8 -*-
"""GUI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17vVVhPvfROOp1A6ySCyVY3HlwYinI4Uh
"""

from breezypythongui import EasyFrame

class SummaryStats(EasyFrame):
    def __init__(self):
        EasyFrame.__init__(self, title="Descriptive Statistics Calculator", width=1000, height=300) #The following code defines the GUI where buttons, input and output fields are devloped
        self.addLabel(text="Enter numeric value and Click ADD Button", row=0, column=0)
        self.inputField = self.addTextField(text="", row=1, column=0, width=30) #creates an input field where data is collected
        self.addButton(text="ADD", row=2, column=0, command=lambda: self.add())  #creates a button where numbers can be appended and cleared once entered to the input field
        self.addButton(text="RESET", row=2, column=1, command=lambda: self.reset())  #resets the caclulator for new calulactions
        self.addButton(text="Calculate", row=3, column=1, command=lambda: self.calculate())   # A button that Calculates the numbers
        self.outputArea6 = self.addTextField(text="", row=1, column=1, width=60)
        self.addLabel(text = "Mean",row = 4, column = 0) #Adds a mean labl
        self.outputArea1 = self.addFloatField(value = 0.0,row = 4,column =0,precision=2) #creates an output area to show the calulated mean
        self.addLabel(text="Median", row=5, column=0) #creates a lable named median
        self.outputArea2 = self.addFloatField(value=0.0, row=5, column=0, precision=2) #creates an output area that creates a median
        self.addLabel(text="Range", row=6, column = 0) #creates a rage lable
        self.outputArea4 = self.addTextField(text="", row=6, column=0) #output area hat presents the min and max of the range
        self.addLabel(text="Mode", row=7, column=0) #provides a lable called mode
        self.outputArea5 = self.addFloatField(value=0.0, row=7, column=0, precision=2) #output area for the calculated mode


    mylist = []
    tempFloat = 0

    def add(self): #this function defines the add button that allows the user to add numbers to a list to be calulated
        input = self.inputField.get()
        self.mylist.append(float(input))
        self.outputArea6.setText(str(self.mylist) + ",")
        self.inputField.setText("")

    def reset(self): #the function show here allows the user to rest the calultor to create calulations on a different set of numbers
        self.mylist = []
        self.inputField.setText("")
        self.outputArea1.setNumber(0.0)
        self.outputArea2.setNumber(0.0)
        self.outputArea5.setNumber(0.0)
        self.outputArea4.setText("")
        self.outputArea6.setText("")

    def calculate(self): #this function shown here is used to define a universal function that is able to create the desired calulations
        tempFloat = 0

        #Mean
        for ls in self.mylist: #this chunk of code defines the mode of the set of numbers
            tempFloat += ls
        self.outputArea1.setNumber(tempFloat / len(self.mylist))

        #Median
        self.mylist.sort() #this small chunk of code is used to calulate the median of the appended list
        mid = int(len(self.mylist) / 2)
        if len(self.mylist) % 2:
            self.outputArea2.setNumber(self.mylist[mid])
        else:
            self.outputArea2.setNumber((self.mylist[mid] + self.mylist[mid - 1]) / 2)

        #Range
        MaxVal = max(self.mylist) #this chunk of code finds the minimum and maximum values in the list and outputs them as string and seperates each value with a comma to show the min and max
        MinVal = min(self.mylist)
        self.outputArea4.setText(str(MaxVal)+","+str(MinVal))

        #Mode
        self.outputArea5.setNumber(max(set(self.mylist), key=self.mylist.count))#this set of code counts the most frequently occuring values within the list(Inputput field)


def main():
        SummaryStats().mainloop()

if __name__ == "__main__":
        main()

!pip install breezypythongui